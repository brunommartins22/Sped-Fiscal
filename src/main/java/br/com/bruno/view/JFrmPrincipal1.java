/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.bruno.view;

import br.com.bruno.table.TituloTableModel;
import br.com.bruno.model.Contribuinte;
import br.com.bruno.model.ItemList;
import br.com.bruno.model.ItemNotaFiscal;
import br.com.bruno.model.ListasPaginadas;
import br.com.bruno.model.Produto;
import br.com.bruno.model.TituloEmpresa;
import br.com.bruno.model.TituloNotaFiscal;
import br.com.bruno.utils.Utils;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.plaf.metal.MetalButtonUI;
import javax.swing.table.DefaultTableCellRenderer;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import br.com.bruno.utils.Actions;

/**
 *
 * @author bruno
 */
public class JFrmPrincipal1 extends javax.swing.JFrame {

    private Actions a;
    private TituloTableModel tableModel;
    private static List<Contribuinte> contribuintes;
    private static List<Produto> produtos;
    private static List<TituloNotaFiscal> titulosFiscais;
    private static TituloNotaFiscal tituloNotaFiscal;
    private static TituloEmpresa tituloEmpresa;

    /**
     * Creates new form JfrmPrincipal
     */
    public JFrmPrincipal1() {
        initComponents();
        a = new Actions(this);
        titulosFiscais = new ArrayList<TituloNotaFiscal>();
        definirFormulario();
    }

    public void definirFormulario() {
        jLblTitulo.setText("Sped-Fiscal - 1.1.0.0");
        a.iconApplication(this);
        setName("principal");
        /**
         * utiliza-se para retirada da janela do windows e ser visualizado
         * apenas o panel
         */
        dispose();
        setUndecorated(true);
        setLocationRelativeTo(null);
        this.setPreferredSize(new Dimension(800, 600));
        a.mapearTeclas(this);
        jBtnFechar.setUI(new MetalButtonUI());

        tableModel = new TituloTableModel(null);
        jTable1.setModel(tableModel);
        jTable1.setAutoResizeMode(jTable1.AUTO_RESIZE_OFF);
        a.setColumn(jTable1, 0, 100);
        a.setColumn(jTable1, 1, 100);
        a.setColumn(jTable1, 2, 100);
        a.setColumn(jTable1, 3, 100);
        a.setColumn(jTable1, 4, 130);
        a.setColumnMinWidth(jTable1, 5, 300);
        a.setColumn(jTable1, 6, 100);
        a.setColumn(jTable1, 7, 100);
        a.setColumn(jTable1, 8, 100);
        a.setColumn(jTable1, 9, 100);
        a.setColumn(jTable1, 10, 300);
        a.setColumn(jTable1, 11, 100);
        DefaultTableCellRenderer dtcr1 = new DefaultTableCellRenderer();
        DefaultTableCellRenderer dtcr2 = new DefaultTableCellRenderer();
        dtcr1.setHorizontalAlignment(SwingConstants.RIGHT);
        dtcr2.setFont(new Font("arial", Font.BOLD, 16));
        jTable1.getColumnModel().getColumn(11).setCellRenderer(dtcr1);
        jTable1.getColumnModel().getColumn(3).setCellRenderer(dtcr2);
        jTable1.getColumnModel().getColumn(4).setCellRenderer(dtcr2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLblTitulo = new javax.swing.JLabel();
        jBtnFechar1 = new javax.swing.JButton();
        jBtnFechar = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel(){
            protected  void paintComponent(Graphics g){
                super.paintComponent(g);
                ImageIcon icon = new ImageIcon(getClass().getResource("/imagens/fundo.png"));
                Image image = icon.getImage();
                g.drawImage(image,0,0,getWidth(),getHeight(),this);
            }};
            JBtnImportar = new javax.swing.JToggleButton();
            jScrollPane1 = new javax.swing.JScrollPane();
            jTable1 = new javax.swing.JTable();
            jPanel3 = new javax.swing.JPanel();
            jLabel3 = new javax.swing.JLabel();
            jLblNotas = new javax.swing.JLabel();
            jPanel5 = new javax.swing.JPanel();
            jLabel1 = new javax.swing.JLabel();
            jLblEntrada = new javax.swing.JLabel();
            jPanel6 = new javax.swing.JPanel();
            jLabel2 = new javax.swing.JLabel();
            jLblSaida = new javax.swing.JLabel();
            JBtnImportar1 = new javax.swing.JToggleButton();

            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
            addWindowListener(new java.awt.event.WindowAdapter() {
                public void windowOpened(java.awt.event.WindowEvent evt) {
                    formWindowOpened(evt);
                }
            });
            getContentPane().setLayout(new java.awt.CardLayout());

            jPanel1.setLayout(new java.awt.BorderLayout());

            jPanel2.setBackground(new java.awt.Color(0, 0, 0));
            jPanel2.setPreferredSize(new java.awt.Dimension(400, 30));
            jPanel2.setLayout(new java.awt.BorderLayout());

            jLblTitulo.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
            jLblTitulo.setForeground(new java.awt.Color(255, 255, 255));
            jLblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            jLblTitulo.setText("TITULO");
            jLblTitulo.setPreferredSize(new java.awt.Dimension(150, 16));
            jPanel2.add(jLblTitulo, java.awt.BorderLayout.LINE_START);

            jBtnFechar1.setBackground(new java.awt.Color(0, 0, 0));
            jBtnFechar1.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
            jBtnFechar1.setForeground(new java.awt.Color(255, 255, 255));
            jBtnFechar1.setText("X");
            jBtnFechar1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
            jBtnFechar1.setFocusable(false);
            jBtnFechar1.setPreferredSize(new java.awt.Dimension(50, 26));
            jBtnFechar1.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    jBtnFechar1MouseEntered(evt);
                }
                public void mouseExited(java.awt.event.MouseEvent evt) {
                    jBtnFechar1MouseExited(evt);
                }
            });
            jBtnFechar1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jBtnFechar1ActionPerformed(evt);
                }
            });
            jPanel2.add(jBtnFechar1, java.awt.BorderLayout.EAST);

            jBtnFechar.setBackground(new java.awt.Color(0, 0, 0));
            jBtnFechar.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
            jBtnFechar.setForeground(new java.awt.Color(255, 255, 255));
            jBtnFechar.setText("X");
            jBtnFechar.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
            jBtnFechar.setFocusable(false);
            jBtnFechar.setPreferredSize(new java.awt.Dimension(50, 26));
            jBtnFechar.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    jBtnFecharMouseEntered(evt);
                }
                public void mouseExited(java.awt.event.MouseEvent evt) {
                    jBtnFecharMouseExited(evt);
                }
            });
            jBtnFechar.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jBtnFecharActionPerformed(evt);
                }
            });
            jPanel2.add(jBtnFechar, java.awt.BorderLayout.EAST);

            jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

            JBtnImportar.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
            JBtnImportar.setForeground(new java.awt.Color(0, 0, 51));
            JBtnImportar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/import-sped2.png"))); // NOI18N
            JBtnImportar.setMnemonic('I');
            JBtnImportar.setText("Importar TXT Sped (ALT + I)");
            JBtnImportar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
            JBtnImportar.setMargin(new java.awt.Insets(2, 0, 2, 0));
            JBtnImportar.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    JBtnImportarActionPerformed(evt);
                }
            });
            JBtnImportar.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyPressed(java.awt.event.KeyEvent evt) {
                    JBtnImportarKeyPressed(evt);
                }
            });

            jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null}
                },
                new String [] {
                    "Title 1", "Title 2", "Title 3", "Title 4"
                }
            ));
            jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jTable1MouseClicked(evt);
                }
            });
            jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyPressed(java.awt.event.KeyEvent evt) {
                    jTable1KeyPressed(evt);
                }
            });
            jScrollPane1.setViewportView(jTable1);

            jPanel3.setBackground(new java.awt.Color(51, 51, 51));
            jPanel3.setPreferredSize(new java.awt.Dimension(170, 70));

            jLabel3.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
            jLabel3.setForeground(new java.awt.Color(255, 255, 255));
            jLabel3.setText("<html><u>T. Nota(s)</u></html>");

            jLblNotas.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
            jLblNotas.setForeground(new java.awt.Color(255, 255, 255));
            jLblNotas.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
            jLblNotas.setText("0,00");

            javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
            jPanel3.setLayout(jPanel3Layout);
            jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 66, Short.MAX_VALUE))
                        .addComponent(jLblNotas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap())
            );
            jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(3, 3, 3)
                    .addComponent(jLblNotas, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .addContainerGap())
            );

            jPanel5.setBackground(new java.awt.Color(73, 170, 97));

            jLabel1.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
            jLabel1.setForeground(new java.awt.Color(255, 255, 255));
            jLabel1.setText("<html><u>T. Entrada</u></html>");

            jLblEntrada.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
            jLblEntrada.setForeground(new java.awt.Color(255, 255, 255));
            jLblEntrada.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
            jLblEntrada.setText("0,00");

            javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
            jPanel5.setLayout(jPanel5Layout);
            jPanel5Layout.setHorizontalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 79, Short.MAX_VALUE))
                        .addComponent(jLblEntrada, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap())
            );
            jPanel5Layout.setVerticalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLblEntrada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap())
            );

            jPanel6.setBackground(new java.awt.Color(193, 29, 61));
            jPanel6.setPreferredSize(new java.awt.Dimension(170, 70));

            jLabel2.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
            jLabel2.setForeground(new java.awt.Color(255, 255, 255));
            jLabel2.setText("<html><u>T. Saída</u></html>");

            jLblSaida.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
            jLblSaida.setForeground(new java.awt.Color(255, 255, 255));
            jLblSaida.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
            jLblSaida.setText("0,00");

            javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
            jPanel6.setLayout(jPanel6Layout);
            jPanel6Layout.setHorizontalGroup(
                jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 82, Short.MAX_VALUE))
                        .addComponent(jLblSaida, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap())
            );
            jPanel6Layout.setVerticalGroup(
                jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(3, 3, 3)
                    .addComponent(jLblSaida, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .addContainerGap())
            );

            JBtnImportar1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
            JBtnImportar1.setForeground(new java.awt.Color(0, 0, 51));
            JBtnImportar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/export.png"))); // NOI18N
            JBtnImportar1.setMnemonic('E');
            JBtnImportar1.setText("Exportar Inventario (ALT + E)");
            JBtnImportar1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
            JBtnImportar1.setMargin(new java.awt.Insets(2, 0, 2, 0));
            JBtnImportar1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    JBtnImportar1ActionPerformed(evt);
                }
            });
            JBtnImportar1.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyPressed(java.awt.event.KeyEvent evt) {
                    JBtnImportar1KeyPressed(evt);
                }
            });

            javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
            jPanel4.setLayout(jPanel4Layout);
            jPanel4Layout.setHorizontalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 823, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(13, 13, 13)
                            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(JBtnImportar, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(JBtnImportar1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addContainerGap())
            );
            jPanel4Layout.setVerticalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(18, 18, 18)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(JBtnImportar, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(JBtnImportar1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                    .addGap(18, 18, 18)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap())
            );

            jPanel1.add(jPanel4, java.awt.BorderLayout.CENTER);

            getContentPane().add(jPanel1, "card2");

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void jBtnFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnFecharActionPerformed

        int result = JOptionPane.showConfirmDialog(null, "Deseja Realmente sair do sistema?", "Confirmação", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            dispose();
            System.exit(0);
        }

    }//GEN-LAST:event_jBtnFecharActionPerformed

    private void jBtnFecharMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBtnFecharMouseEntered
        jBtnFechar.setBackground(Color.RED);
    }//GEN-LAST:event_jBtnFecharMouseEntered

    private void jBtnFecharMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBtnFecharMouseExited
        jBtnFechar.setBackground(Color.BLACK);
    }//GEN-LAST:event_jBtnFecharMouseExited

    private void JBtnImportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBtnImportarActionPerformed
        try {
            Double entrada = 0.0;
            Double saida = 0.0;
            JFileChooser chooser = new JFileChooser();
            chooser.setMultiSelectionEnabled(true);
            int resp = chooser.showOpenDialog(this);
            tituloNotaFiscal = null;
            titulosFiscais = new ArrayList<>();
            tituloEmpresa = null;
            contribuintes = new ArrayList<>();
            produtos = new ArrayList<>();
            int o = 1;
            if (resp == JFileChooser.APPROVE_OPTION) {

                for (File f : chooser.getSelectedFiles()) {
                    String extensao = Utils.getExtensaoByFileName(f.getName());
                    if (!extensao.equalsIgnoreCase("TXT")) {
                        throw new Exception("Arquivo Selecionado não possui extensao '.TXT'");
                    }

                    BufferedReader buffRead = new BufferedReader(new FileReader(f.getAbsolutePath()));

                    while (buffRead.ready()) {
                        String linha = buffRead.readLine();
                        if (linha != null && !linha.isEmpty() && linha.length() > 5) {
                            if (linha.substring(1, 5).equals("0000") && tituloEmpresa == null) {
                                tituloEmpresa = new TituloEmpresa();
                                tituloEmpresa = carregarEmpresa(linha);
                            } else if (linha.substring(1, 5).equals("0150")) {
                                carregarContribuintes(linha);
                            } else if (linha.substring(1, 5).equals("0200")) {
                                carregarProdutos(linha);
                            } else if (linha.substring(1, 5).equals("C100")) {

                                if (o == 1) {
                                    tituloNotaFiscal = carregarTituloNotaFiscal(linha);
                                }
                                o++;
                            } else if (linha.substring(1, 5).equals("C170")) {
                                updateItemList(carregarItemNotaFiscal(linha));
                            }
                        }
                    }
                    buffRead.close();

                }

            } else {
                throw new Exception("Operação cancelada pelo usuário!!");
            }

            if (tituloNotaFiscal != null) {

                for (ItemNotaFiscal item : tituloNotaFiscal.getItensNotaFiscal()) {

                    entrada += item.getValorItem();

                }
                titulosFiscais.add(tituloNotaFiscal);
                tableModel.setItems(titulosFiscais);
                jLblEntrada.setText(new DecimalFormat("#,##0.00").format(Utils.arredondamento(entrada)));
                jLblSaida.setText(new DecimalFormat("#,##0.00").format(Utils.arredondamento(saida)));
                jLblNotas.setText(new DecimalFormat("#,##0.00").format(Utils.arredondamento(entrada - saida)));
                JOptionPane.showMessageDialog(this, "Arquivo(s) importado(s) com sucesso!!");
                jTable1.requestFocus();
            }

        } catch (Exception e) {
            e.printStackTrace();
            String message = e.getMessage();
            if (message.contains("String index")) {
                message = "Arquivo com estrutura diferente do Seped-Fiscal.";
            }
            JOptionPane.showMessageDialog(null, message, null, JOptionPane.ERROR_MESSAGE);
            if (!message.equals("Operação cancelada pelo usuario!!")) {
                tableModel.setItems(null);
                jLblEntrada.setText("0,00");
                jLblSaida.setText("0,00");
                jLblNotas.setText("0,00");
                JBtnImportar.requestFocus();
            }
        }
    }//GEN-LAST:event_JBtnImportarActionPerformed

    private void JBtnImportarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JBtnImportarKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            JBtnImportar.doClick();
        }
    }//GEN-LAST:event_JBtnImportarKeyPressed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        boolean resp = jDlgBoasVindas.jDlgBoasVindasIniciar(this);
        if (resp) {
            JBtnImportar.doClick();
        }
    }//GEN-LAST:event_formWindowOpened

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (evt.getClickCount() == 2) {
            openDialogItens();
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            openDialogItens();
        }
    }//GEN-LAST:event_jTable1KeyPressed

    private void JBtnImportar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBtnImportar1ActionPerformed
        try {
            //848.692
            if (!tableModel.getResultList().isEmpty()) {
                Double valorFant = Double.parseDouble(JOptionPane.showInputDialog("Informe o Valor Estimado :"));
                JFileChooser chooser = new JFileChooser();
                chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                int i = chooser.showSaveDialog(this);
                if (i == JFileChooser.APPROVE_OPTION) {
                    i = 0;
                    String filename = chooser.getSelectedFile().getAbsolutePath() + ".xls";
                    HSSFWorkbook workbook = new HSSFWorkbook();
                    HSSFSheet sheet = workbook.createSheet("FirstSheet");

                    HSSFCellStyle txtStyle1 = (HSSFCellStyle) workbook.createCellStyle();
                    HSSFCellStyle txtStyle2 = (HSSFCellStyle) workbook.createCellStyle();
                    HSSFCellStyle txtStyle3 = (HSSFCellStyle) workbook.createCellStyle();

                    HSSFFont txtFont1 = (HSSFFont) workbook.createFont();
                    HSSFFont txtFont2 = (HSSFFont) workbook.createFont();
                    HSSFFont txtFont3 = (HSSFFont) workbook.createFont();

                    txtFont1.setFontName("Arial");
                    txtFont1.setFontHeightInPoints((short) 18);
                    txtFont1.setBold(true);
                    txtFont1.setColor((short) 003366);
                    txtStyle1.setFont(txtFont1);

                    txtFont2.setFontHeightInPoints((short) 14);
                    txtFont2.setFontName("Arial");
                    txtFont2.setColor((short) 003366);
                    txtStyle2.setFont(txtFont1);

                    txtFont3.setFontHeightInPoints((short) 11);
                    txtFont3.setFontName("Arial");
                    txtFont3.setBold(true);
                    txtFont3.setColor((short) 003366);
                    txtStyle3.setFont(txtFont3);

                    //******************* Empresa ***********************
                    HSSFRow rowEmpresa = sheet.createRow((short) i++);
                    rowEmpresa.createCell(0).setCellValue("Empresa: ");
                    rowEmpresa.getCell(0).setCellStyle(txtStyle2);
                    rowEmpresa.createCell(1).setCellValue(Utils.formataStringCNPJ(tituloEmpresa.getCnpj()) + " / " + tituloEmpresa.getNmEmpresa().toUpperCase());
                    rowEmpresa.getCell(1).setCellStyle(txtStyle2);

                    //***************************************************
                    Double acumuladorTotalEntrada = 0.0;
                    Double acumuladorTotalSaida = 0.0;
                    DecimalFormat Formata = new DecimalFormat("#,##0.00");
                    List<ListasPaginadas> result = getListasPaginadas(tableModel.getResultList());
                    int cont = 1;
                    for (ListasPaginadas page : result) {
                        Double acumuladorEntradaMensal = 0.0;
                        Double acumuladorSaidaMensal = 0.0;
                        if (cont == 1) {
                            HSSFRow rowHeader2 = sheet.createRow((short) i++);
                            rowHeader2.createCell(0).setCellValue("Cód Item");
                            rowHeader2.createCell(1).setCellValue("Produto");
                            rowHeader2.createCell(2).setCellValue("Unidade");
                            rowHeader2.createCell(3).setCellValue("Valor Unitario(R$)");
                            rowHeader2.createCell(4).setCellValue("Local");
                            rowHeader2.createCell(5).setCellValue("Quantidade");
                            rowHeader2.createCell(6).setCellValue("Conta Contabil");
                            rowHeader2.createCell(7).setCellValue("Total(R$)");
                            rowHeader2.getCell(0).setCellStyle(txtStyle3);
                            rowHeader2.getCell(1).setCellStyle(txtStyle3);
                            rowHeader2.getCell(2).setCellStyle(txtStyle3);
                            rowHeader2.getCell(3).setCellStyle(txtStyle3);
                            rowHeader2.getCell(4).setCellStyle(txtStyle3);
                            rowHeader2.getCell(5).setCellStyle(txtStyle3);
                            rowHeader2.getCell(6).setCellStyle(txtStyle3);
                            rowHeader2.getCell(7).setCellStyle(txtStyle3);
                        }
                        Integer codbarraCont = 1;
                        for (TituloNotaFiscal nota : page.getNotas()) {
                            for (ItemNotaFiscal item : nota.getItensNotaFiscal()) {
                                if (!item.getProduto().getNmProduto().contains("MOTOR SEMICOMPLETO")) {
                                    Integer qtd = ((Double) (item.getQuantidade() + (item.getQuantidade() * (valorFant / 100)))).intValue();

                                    Double valorUnit = item.getValorItem() / item.getQuantidade();
                                    Double valorItem = valorUnit * qtd;

                                    HSSFRow rowHeader3 = sheet.createRow((short) i++);
                                    rowHeader3.createCell(0).setCellValue(codbarraCont.toString());
                                    rowHeader3.createCell(1).setCellValue(item.getProduto().getNmProduto());
                                    rowHeader3.createCell(2).setCellValue(item.getUnidade());
                                    rowHeader3.createCell(3).setCellValue(Formata.format(Utils.arredondamento(valorUnit)));
                                    rowHeader3.createCell(4).setCellValue("1");
                                    rowHeader3.createCell(5).setCellValue(qtd);
                                    rowHeader3.createCell(6).setCellValue("56");
                                    rowHeader3.createCell(7).setCellValue(Formata.format(Utils.arredondamento(valorItem)));
                                    acumuladorEntradaMensal = acumuladorEntradaMensal + valorItem;

                                    codbarraCont++;
                                }
                            }

                        }

//                        acumuladorTotalEntrada = acumuladorTotalEntrada + acumuladorEntradaMensal;
//                        acumuladorTotalSaida = acumuladorTotalSaida + acumuladorSaidaMensal;
                        if (cont == result.size()) {
                            HSSFRow rowHeader8 = sheet.createRow((short) i++);
                            rowHeader8.createCell(7).setCellValue(" -------------------- ");
                            rowHeader8.getCell(7).setCellStyle(txtStyle3);
                            HSSFRow rowHeader9 = sheet.createRow((short) i++);
                            rowHeader9.createCell(6).setCellValue("Total Geral (R$):");
                            rowHeader9.createCell(7).setCellValue(Formata.format(acumuladorEntradaMensal));
                            rowHeader9.getCell(6).setCellStyle(txtStyle3);
                            rowHeader9.getCell(7).setCellStyle(txtStyle3);
                            System.out.println("VALOR ENTRADA = " + Utils.arredondamento(acumuladorEntradaMensal));
                            break;
                        }
                        cont++;
                    }

                    FileOutputStream fileOut = new FileOutputStream(filename);
                    workbook.write(fileOut);
                    fileOut.close();
                    workbook.close();

                    JOptionPane.showMessageDialog(null, "Arquivo Exportado com Sucesso", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    throw new Exception("Operação cancelada pelo usuário!!");
                }

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_JBtnImportar1ActionPerformed

    public List<ListasPaginadas> getListasPaginadas(List<TituloNotaFiscal> result) {
        List<ListasPaginadas> resp = new ArrayList<>();
        for (TituloNotaFiscal nf : result) {
            boolean isExist = false;
            int i = 0;
            for (ListasPaginadas listas : resp) {
                if (listas.getMes().equals(nf.getDtEntradaSaida().getMonth() + 1)) {
                    isExist = true;
                    break;
                }
                i++;
            }
            if (!isExist) {
                ListasPaginadas lp = new ListasPaginadas();
                lp.setMes(nf.getDtEntradaSaida().getMonth() + 1);
                lp.getNotas().add(nf);
                resp.add(lp);
            } else {
                resp.get(i).getNotas().add(nf);
            }
        }
        return resp;
    }


    private void JBtnImportar1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JBtnImportar1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_JBtnImportar1KeyPressed

    private void jBtnFechar1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBtnFechar1MouseEntered
        jBtnFechar.setBackground(Color.RED);
    }//GEN-LAST:event_jBtnFechar1MouseEntered

    private void jBtnFechar1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBtnFechar1MouseExited
        jBtnFechar.setBackground(Color.BLACK);
    }//GEN-LAST:event_jBtnFechar1MouseExited

    private void jBtnFechar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnFechar1ActionPerformed
        int result = JOptionPane.showConfirmDialog(null, "Deseja Realmente sair do sistema?", "Confirmação", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            dispose();
            System.exit(0);
        }
    }//GEN-LAST:event_jBtnFechar1ActionPerformed

    public void openDialogItens() {
        jDlgItensProduto.jDlgItensProdutoIniciar(this, tableModel.getItem(jTable1.getSelectedRow()));
    }

    public TituloEmpresa carregarEmpresa(String obj) throws ParseException {
        TituloEmpresa te = new TituloEmpresa();
        String[] resp = obj.split("\\|");
        int i = 0;
        for (String obj2 : resp) {
            switch (i) {
                case 1: {
                    te.setIdentificador(obj2);
                    break;
                }
                case 2: {
                    te.setCodVersaoLeiaute(obj2 == null || obj2.equals("") ? null : Long.parseLong(obj2));
                    break;
                }
                case 3: {
                    te.setCodFinalidade(obj2 == null || obj2.equals("") ? null : Long.parseLong(obj2));
                    break;
                }
                case 4: {

                    te.setDataInicial(Utils.StringToDate(obj2));
                    break;
                }
                case 5: {
                    te.setDataFinal(Utils.StringToDate(obj2));
                    break;
                }
                case 6: {
                    te.setNmEmpresa(obj2);
                    break;
                }
                case 7: {
                    te.setCnpj(obj2);
                    break;
                }
                case 8: {
                    te.setCpf(obj2);
                    break;
                }
                case 9: {
                    te.setUf(obj2);
                    break;
                }
                case 10: {
                    te.setIe(obj2);
                    break;
                }
                case 11: {
                    te.setCodMunicipio(obj2 == null || obj2.equals("") ? null : Long.parseLong(obj2));
                    break;
                }
                case 12: {
                    te.setIm(obj2);
                    break;
                }
                case 13: {
                    te.setSuframa(obj2);
                    break;
                }
                case 14: {
                    te.setIndPerfil(obj2);
                    break;
                }
                case 15: {
                    te.setIndAtividade(obj2 == null || obj2.equals("") ? null : Long.parseLong(obj2));
                    break;
                }
            }
            i++;
        }
        return te;
    }

    public void carregarContribuintes(String obj) {
        Contribuinte c = new Contribuinte();
        String[] resp = obj.split("\\|");
        int i = 0;
        for (String obj2 : resp) {
            switch (i) {
                case 1: {
                    c.setIdentificador(obj2);
                    break;
                }
                case 2: {
                    c.setCodigo(obj2);
                    break;
                }
                case 3: {
                    c.setParticipante(obj2);
                    break;
                }
                case 4: {
                    c.setCodPais(obj2 != null && !obj2.isEmpty() ? Long.parseLong(obj2) : null);
                    break;
                }
                case 5: {
                    c.setCnpj(obj2 != null && !obj2.isEmpty() ? Long.parseLong(obj2) : null);
                    break;
                }
                case 6: {
                    c.setCpf(obj2 != null && !obj2.isEmpty() ? Long.parseLong(obj2) : null);
                    break;
                }
                case 7: {
                    c.setIe(obj2);
                    break;
                }
                case 8: {
                    c.setCodMunicipio(obj2 != null && !obj2.isEmpty() ? Long.parseLong(obj2) : null);
                    break;
                }
                case 9: {
                    c.setSuframa(obj2);
                    break;
                }
                case 10: {
                    c.setEndereco(obj2);
                    break;
                }
                case 11: {
                    c.setNumImovel(obj2);
                    break;
                }
                case 12: {
                    c.setComplemento(obj2);
                    break;
                }
                case 13: {
                    c.setBairro(obj2);
                    break;
                }
            }
            i++;
        }
        contribuintes.add(c);
    }

    public void carregarProdutos(String obj) {
        Produto p = new Produto();
        String[] resp = obj.split("\\|");
        int i = 0;
        for (String obj2 : resp) {
            switch (i) {
                case 1: {
                    p.setIdentificador(obj2);
                    break;
                }
                case 2: {
                    p.setCodItem(obj2);
                    break;
                }
                case 3: {
                    p.setNmProduto(obj2);
                    break;
                }
                case 4: {
                    p.setCodBarra(obj2);
                    break;
                }
                case 5: {
                    p.setCodAntItem(obj2);
                    break;
                }
                case 6: {
                    p.setUnidade(obj2);
                    break;
                }
                case 7: {
                    p.setTipoProd(obj2);
                    break;
                }
                case 8: {
                    p.setNcm(obj2);
                    break;
                }
                case 9: {
                    p.setExIpi(obj2);
                    break;
                }
                case 10: {
                    p.setCodGenero(obj2 != null && !obj2.isEmpty() ? Long.parseLong(obj2) : null);
                    break;
                }
                case 11: {
                    p.setCodLista(obj2 != null && !obj2.isEmpty() ? Long.parseLong(obj2) : null);
                    break;
                }
                case 12: {
                    p.setAliqIcms(obj2 != null && !obj2.isEmpty() ? Long.parseLong(obj2) : null);
                    break;
                }
            }
            i++;
        }
        produtos.add(p);
    }

    public TituloNotaFiscal carregarTituloNotaFiscal(String obj) throws ParseException {
        TituloNotaFiscal t = new TituloNotaFiscal();
        String[] resp = obj.split("\\|");
        int i = 0;
        for (String obj2 : resp) {
            switch (i) {
                case 1: {
                    t.setIdentificador(obj2);
                    break;
                }
                case 2: {
                    t.setTipoOperacao(obj2);
                    break;
                }
                case 3: {
                    t.setTipoEmitente(obj2);
                    break;
                }
                case 4: {
                    for (Contribuinte c : contribuintes) {
                        if (c.getCodigo().equals(obj2)) {
                            t.setContribuinte(c);
                            break;
                        }
                    }
                    break;
                }
                case 5: {
                    t.setCodModelo(obj2);
                    break;
                }
                case 6: {
                    t.setCodSituacao(obj2 != null && !obj2.isEmpty() ? Long.parseLong(obj2) : null);
                    break;
                }
                case 7: {
                    t.setSerie(obj2);
                    break;
                }
                case 8: {
                    t.setNumDocumento(obj2 != null && !obj2.isEmpty() ? Long.parseLong(obj2) : null);
                    break;
                }
                case 9: {
                    t.setChaveNfe(obj2);
                    break;
                }
                case 10: {
                    t.setDtEmissao(new SimpleDateFormat("ddMMyyyy").parse(obj2));
                    break;
                }
                case 11: {
                    t.setDtEntradaSaida(new SimpleDateFormat("ddMMyyyy").parse(obj2));
                    break;
                }
                case 12: {
                    t.setValorDoc(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 13: {
                    t.setTipoPagamento(obj2);
                    break;
                }
                case 14: {
                    t.setValorDesconto(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 15: {
                    t.setValorAbatimentoNT(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 16: {
                    t.setValorMercadorias(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 17: {
                    t.setTipoFrete(obj2);
                    break;
                }
                case 18: {
                    t.setValorFrete(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 19: {
                    t.setValorSeguro(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 20: {
                    t.setValorDespesasAcessorias(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 21: {
                    t.setValorBaseCalculoICMS(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 22: {
                    t.setValorICMS(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 23: {
                    t.setValorBaseCalculoIcmsST(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 24: {
                    t.setValorIcmsST(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 25: {
                    t.setValorIPI(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 26: {
                    t.setValorPis(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 27: {
                    t.setValorCofins(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 28: {
                    t.setValorPisST(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 29: {
                    t.setValorCofinsSt(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
            }
            i++;
        }
        return t;
    }

    public static ItemNotaFiscal carregarItemNotaFiscalInterage(String obj) {
        ItemNotaFiscal inf = new ItemNotaFiscal();
        String[] resp = obj.split("\\|");
        int i = 0;
        for (String obj2 : resp) {
            switch (i) {
                case 1: {//indentificador
                    inf.setIdentificador(obj2);
                    break;
                }
                case 2: {//codpro
                    for (Produto p : produtos) {
                        if (p.getCodItem().equals(obj2)) {
                            inf.setProduto(p);
                            break;
                        }
                    }
                    break;
                }
                case 3: {//unidade
                    inf.setUnidade(obj2);
                    break;
                }
                case 4: {//quantidade
                    inf.setQuantidade(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 5: {//valor final
                    inf.setValorItem(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
            }
            i++;
        }
        return inf;
    }

    public static ItemNotaFiscal carregarItemNotaFiscal(String obj) {
        ItemNotaFiscal inf = new ItemNotaFiscal();
        String[] resp = obj.split("\\|");
        int i = 0;
        for (String obj2 : resp) {
            switch (i) {
                case 1: {
                    inf.setIdentificador(obj2);
                    break;
                }
                case 2: {
                    inf.setNumItem(obj2 != null && !obj2.isEmpty() ? Long.parseLong(obj2) : null);
                    break;
                }
                case 3: {
                    for (Produto p : produtos) {
                        if (p.getCodItem().equals(obj2)) {
                            inf.setProduto(p);
                            break;
                        }
                    }
                    break;
                }
                case 4: {
                    inf.setComplementoItem(obj2);
                    break;
                }
                case 5: {
                    inf.setQuantidade(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 6: {
                    inf.setUnidade(obj2);
                    break;
                }
                case 7: {
                    Double valor = obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0;
                    inf.setValorItem(valor);
                    break;
                }
                case 8: {
                    inf.setValorDesc(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 9: {
                    inf.setTipoMvimentacao(obj2);
                    break;
                }
                case 10: {
                    inf.setCstICMS(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 11: {
                    inf.setCfop(obj2 != null && !obj2.isEmpty() ? Long.parseLong(obj2) : null);
                    break;
                }
                case 12: {
                    inf.setCodNaturezaOper(obj2);
                    break;
                }
                case 13: {
                    inf.setValorBaseCalculoICMS(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 14: {
                    inf.setAliquotaICMS(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 15: {
                    inf.setValorICMS(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 16: {
                    inf.setValorBaseCalculoIcmsST(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 17: {
                    inf.setAliquotaST(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 18: {
                    inf.setValorIcmsST(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 19: {
                    inf.setTipoApuracao(obj2);
                    break;
                }
                case 20: {
                    inf.setCstIPI(obj2);
                    break;
                }
                case 21: {
                    inf.setCodEquadramentoIPI(obj2);
                    break;
                }
                case 22: {
                    inf.setValorBaseCalculoIPI(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 23: {
                    inf.setAliquotaIPI(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 24: {
                    inf.setValorIPI(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 25: {
                    inf.setCstPIS(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 26: {
                    inf.setValorBaseCalculoPIS(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 27: {
                    inf.setAliquotaPercentPIS(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 28: {
                    inf.setQuantidadeBaseCalculoPIS(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 29: {
                    inf.setAliquotaValorPIS(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 30: {
                    inf.setValorPIS(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 31: {
                    inf.setCstCOFINS(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 32: {
                    inf.setValorBaseCalculoCOFINS(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 33: {
                    inf.setAliquotaPercentCOFINS(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 34: {
                    inf.setQuantidadeBaseCalculoCOFINS(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 35: {
                    inf.setAliquotaValorCOFINS(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 36: {
                    inf.setValorCOFINS(obj2 != null && !obj2.isEmpty() ? Double.parseDouble(obj2.replace(",", ".")) : 0.0);
                    break;
                }
                case 37: {
                    inf.setCodContaContabil(obj2);
                    break;
                }
            }
            i++;
        }

        return inf;
    }
    private static ItemList itemList = null;
    private static int c = 0;

    public static ItemNotaFiscal getFindCodList(Produto prod, List<ItemNotaFiscal> result) {
        return result.stream().filter((ItemNotaFiscal t) -> {
            boolean isExist = (Objects.equals(t.getProduto().getCodItem(), prod.getCodItem()) && Objects.equals(t.getProduto().getUnidade(), prod.getUnidade()));

            if (isExist) {
                itemList = new ItemList();
                itemList.setIndex(c);
                itemList.setItemNotaFiscal(t);
                c = 0;
            } else {
                c++;
            }

            return isExist;
        }).findFirst().orElse(null);

    }

    /**
     * se o item encontra-se na listagem, ser atualizado seus atributos para
     * somar com os novos. caso contrario add in List; 7891000140307
     *
     * @param inf2
     */
    public static void updateItemList(ItemNotaFiscal inf2) {
        if (inf2 != null && inf2.getProduto() != null) {
            boolean isExist = false;
            for (ItemNotaFiscal item : tituloNotaFiscal.getItensNotaFiscal()) {
                if (item.getProduto().getNmProduto().trim().equalsIgnoreCase(inf2.getProduto().getNmProduto().trim()) && item.getProduto().getUnidade().trim().equalsIgnoreCase(inf2.getProduto().getUnidade().trim())) {
                    System.out.println("Produto Repetido = " + item.getProduto().getCodBarra() + " - " + item.getProduto().getNmProduto());
                    Double quantidade = item.getQuantidade() + (inf2.getQuantidade() != null ? inf2.getQuantidade() : 0.0);
                    item.setQuantidade(Utils.arredondamento(quantidade));
                    item.setValorItem((item.getValorItem() + (inf2.getValorItem() != null ? inf2.getValorItem() : 0.0)));
                    isExist = true;
                    break;
                }
            }

            if (!isExist) {
                tituloNotaFiscal.getItensNotaFiscal().add(inf2);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrmPrincipal1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrmPrincipal1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrmPrincipal1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrmPrincipal1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrmPrincipal1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton JBtnImportar;
    private javax.swing.JToggleButton JBtnImportar1;
    private javax.swing.JButton jBtnFechar;
    private javax.swing.JButton jBtnFechar1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLblEntrada;
    private javax.swing.JLabel jLblNotas;
    private javax.swing.JLabel jLblSaida;
    private javax.swing.JLabel jLblTitulo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
